[{"content":"前言 本文会介绍如何基于 Github Pages + Github Actions + Hugo 搭建个人博客网站，它主要包括以下特性：\n 免费托管 版本控制 全自动部署 Markdown语法支持 个性化主题 支持自定义域名  前置知识  Git（熟悉） GitHub（了解） Markdown（了解） HTML\u0026amp;CSS（了解）  必备条件  Github 账户  效果展示：https://hughxia.github.io\n项目地址：https://github.com/hughxia/hughxia.github.io\n创建 GitHub Pages 站点  Github Pages 适用于具有 GitHub Free 和组织的 GitHub Free 的公共仓库，以及具有 GitHub Pro、GitHub Team、GitHub Enterprise Cloud 和 GitHub Enterprise Server 的公共和私有仓库。\n Github Pages 可以帮助我们从特定的 GitHub Repo 生成静态站点。这里我们参照Github Pages 官方文档创建属于你的个人站点。\n创建仓库 首先新建一个 Repository，Repository name 根据 Owner 的不同，名字要求分别为 \u0026lt;user\u0026gt;.github.io 或 \u0026lt;organization\u0026gt;.github.io 格式。因为是个人博客，我们使用自己的用户名。\n查看设置 当创建完成后，就可以在 Github Repository 页中看到刚刚创建的 \u0026lt;user\u0026gt;.github.io ，我们可以在此 Repo 上方的 Settings 菜单中的 Pages 页，进行相关设置。  Setting \n在 Source 项中可以配置站点的发布源，默认应为 main 分支的根目录。图中我设置为了 gh-pages 分支，原因后面再讲。\n在 Custom domain 项则可以配置自定义域名，并启用HTTPS。\n使用 Hugo 生成博客框架  Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.\n 要搭建完整的 Blog 还需要博客生成器的帮助。目前主流的三大工具分别为Hugo，Jekyll和Hexo。其中Hugo的 🌟 最多，编译速度也最快，这里我们选用它来做示例。\n安装Hugo MacOS 和 Linux 系统都可以直接在命令行进行安装，Windows 系统的安装可以参照官方文档。这里以 Ubuntu20.04 为例，打开终端，输入安装命令：\napt install hugo 安装完成后，通过以下命令进行确认：\nhugo version 新建站点 进入上面创建的 \u0026lt;user\u0026gt;.github.io 项目路径，执行下面的命令，Hugo会在当前路径创建站点框架。默认配置文件格式为 TOML 格式，可以通过 -f yaml 参数修改为我们熟悉的 YAML 格式。\nhugo new site . -f yaml 选择主题 官方主题页有丰富的主题可供选择，下面以我目前使用的 hugo-theme-stack 为例。\n这里我们可以通过 Git Submodule 机制将主题仓库克隆下来：\ngit submodule add https://github.com/htdvisser/hugo-theme-stack.git themes/hugo-theme-stack 注意： 当我们使用 git clone 命令拉取远程仓库的时候，默认不会拉取子模块代码，可以通过添加 --recurse-submodules 参数来拉取。 或者在主项目中执行以下命令：\ngit submodule update --remote --merge 编辑配置 在项目根目录下可以找到 config.yaml 文件，这是整个Hugo项目的配置文件，我们修改 baseurl , languageCode , title 和 theme 这几个字段完成基本配置。主题往往都会提供丰富的自定义配置，可以自行查阅项目文档。\nbaseurl:https://hughxia.github.io/languageCode:zh-cntheme:hugo-theme-stacktitle:Hugh\u0026#39;s Blog创建文章 执行以下命令创建一篇文章：\nhugo new post/first-post.md Hugo会在 Markdown 文件头部以配置文件相同语法的形式添加一些 Meta 信息，我们在分隔线 --- 下方进行文章内容的编辑。\n本地预览 启动 hugo server，即可在本地http://localhost:1313进行预览。\nhugo server -D 其中 -D 参数指会渲染草稿，通过 hugo new posts 命令创建出来的文章顶部Meta信息中默认draft设置为 true ，当编辑完成准备正式发布时，需要将其改为 false。\n通过 Github Actions 自动部署  在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI/CD），并将操作合并到完全自定义的工作流程中。\n 部署问题 现在可以通过 hugo 命令在 public 文件夹下生成最终页面。我们可以将这个文件夹也加入到Git的版本控制，然后通过在上述 Settings 页中将发布源改为 public 来完成部署。\n不过，这需要我们每次在完成文章创作，同步至 Github 之前都需要主动生成 public 文件夹，这样不仅麻烦而且会在我们当前的仓库中增加很多冗余文件。好在 Github 官方推出了 CI 利器：Github Actions，通过它可以完美地解决上述问题。\n基本概念  工作流程（workflow）: 工作流程是您添加到仓库的自动化过程。 事件（event）: 事件是触发工作流程的特定活动。 作业（job）: 作业是在同一运行服务器上执行的一组步骤。 步骤（step）: 步骤是可以在作业中运行命令的单个任务。 操作（action）: 操作是独立命令，它们组合到步骤以创建作业。  CI配置 在 Github 的 Repo 页上方我们可以看到 Actions 菜单，在这里我们可以方便地创建一个 Workflow ，下面是我的配置：\nname:CI# Controls when the workflow will runon:# Triggers the workflow on push or pull request events but only for the main branchpush:branches:[main]pull_request:branches:[main]# Allows you to run this workflow manually from the Actions tabworkflow_dispatch:# A workflow run is made up of one or more jobs that can run sequentially or in paralleljobs:# This workflow contains a single job called \u0026#34;build\u0026#34;deploy:# The type of runner that the job will run onruns-on:ubuntu-latest# Steps represent a sequence of tasks that will be executed as part of the jobsteps:- name:Git checkoutuses:actions/checkout@v2with:submodules:true# Fetch Hugo themes (true OR recursive)fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugo# You may pin to the exact commit or the version.# uses: peaceiris/actions-hugo@2e89aa66d0093e4cd14751b3028fc1a179452c2euses:peaceiris/actions-hugo@v2.4.13with:hugo-version:\u0026#34;0.84.4\u0026#34;# Runs a single command using the runners shell- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3if:github.ref == \u0026#39;refs/heads/main\u0026#39;with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./public上述配置的意思是我们会在每次 push 代码至 main 分支的时，在最新的 Ubuntu 系统环境下依次完成以下操作：\n  将 main 分支最新代码检出\n  安装指定版本的 hugo\n  通过 hugo --minify 以最小化的方式打包网页至 public 文件\n  将打包后的文件夹推送至当前仓库的 gh-pages 分支\n  还记得上面在 Pages 图片中的配置吧，这时候 Github Pages 就会从 gh-pages 分支的根目录生成最终的网页。可以在 Actions 页查看 Job 的执行情况。当执行完成后，一般等待 1 ~ 3 分钟，就可以在自己的博客网站看到最新提交的内容了。\n后记 通过上面的步骤，我们完成了一个属于你自己的博客网站的搭建（别忘了定制你的个性化主题哟~），接下来就随心所欲地开始你的内容创作吧。\n","date":"2021-07-11T00:16:41+08:00","image":"https://hughxia.github.io/p/github-based-blog-guide/github_hu49a75afa8dde1d5fada982f45f8559d5_29074_120x120_fill_box_smart1_2.png","permalink":"https://hughxia.github.io/p/github-based-blog-guide/","title":"基于Github搭建博客指南"}]